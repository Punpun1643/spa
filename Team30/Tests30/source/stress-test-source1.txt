proc Follows {
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
    p = q;
}


procedure Nesting {
  
  a = a - 1;
  read a;

  if (c * 3 == d % 2) then {
    c = 7 + a + b * d;
    a = b; 
    while (f * 2 < 5) {
      print f;
      read d;
      b = a;
      if (!(c < a)) then {
        d = c + a;
        a = b;
        while (d >= 2 / a *c) {
          print x;
          while (e == b) {
            while (f == 0) {
              b = a;
              if ((g - f) && (b % g)) then {
                48 % g + x % 92 + d;
                read x;
                g = 0 % e / 3 - 0 * 11 % b;
              } else {
                call p1;
                e = c + c + 1;
                a = b;
              }
              a = c % a - x / b;
              b = a;
            }
            read e;
          }
          a = b;
        }
        e = e + 1;
        print x;
      } else {

        while (1 == g) {
          f = b + d - a;
          c = b - a;
        }
      }
      call p2;
      b = a;
    }
  } else {
    if (!(6 > e) || (f >= 0)) then {
      a = b;
      if (6 > f) then {
        c = x + a + d + b;
      } else {
        e = f;
        b = a;
      }
    } else {
      while ((1 > 1) && (d == a / 0) ) {
        b = a;
      }
    }
    print a;
  } 


}


proc Patterns {
    
    z = c + a + d + b;
    z = c - a + d - b;
    z = c + (a + d) + b;
    z = c - (a + d) + b;
    z = c + (a + d - b);
    z = c - a + d * b;
    z = c + ((a) + d) + b;
    z = c + (a + (d)) + b;
    z = (c - a + (d * b));
    z = (c - a) + (d * b);
    z = (c - a + d) * (b);
    z = c + ((a + d)) + b;
    z = c + (a + d + b);
    z = c + ((a + d + b));
    z = (c - a) + d * b;
    z = (c - a + d) * b;
    z = c - (a + d * b);
    z = (c - (a + d * b));
    
    z = a + d * b - c / e % f;
    z = a + d * b - c / (e % f);
    z = a + d * ((b - c) / e) % f;
    z = (a + d) * (b - c / e) % f;
    z = a + d * (b - (c / e) % f);

    while (((((!((aa >= bb) || (!(v <= b)))) && (((0 == fa) || (((42 * (44444 / 90 * 7447 / c)) > m) && (!(((0 > 0) && (!(J32 >= 0))) || ((!(5089 + x * 467 >= 1)) && (((d > ad) && (0 < c)) || ((giaoj1 - 6 + 2147483647 + 9 / x % f == 0) || (b1 % (b2) / o - h == bc2)))))))) || ((adfgoihpa <= 0) && (l >= 0 - 3 % 0)))) || (hd < 1)) && (bc <= 1)) || ((!(!(((2 > 60) && (Bc < b3)) || (888 % E <= x)))) && (!((57 >= m) && (0 > fc))))) {
      read foo;
    }

    if (!((((((!(f == bp)) || (16 == h)) || (c + Jq1PP < 0 % v)) || ((0 != 0) && ((95 == 0) || (e < b2)))) && (qad < 89)) && (((4 == p3b0) || ((!(0 < J)) || (0 / giaoj1 != 0 * n))) && (L >= b4)))) then {
      read bar;
    } else {
      read flan;
    }
}

proc p0 {
  a = b;
  call p1;
  call p2;
  call p3;
  call p6;
}

proc p1 {
  call p4;
  a = b;
  call p7;
}

proc p2 {
  b = a;
  call p4;
}

proc p3 {
  a = b;
  call p5;
}

proc p4 {
  b = a;
}

proc p5 {
  a = b;
  call p9;
}

proc p6 {
  a = b;
  call p9;
  call p10;
  call p8;
  b = a;
}

proc p7 {
  b = a;
}

proc p8 {
  call p12;
  call p11;
  a = b;
}

proc p9 {
  b = a; 
  call p12;
  call p11;
}

proc p10 {
  a = b;
  call p11;
}

proc p11 {
  a = b;
  call p14;
  call p15;
} 

proc p12 {
  call p13;
  a = b;
}

proc p13 {
  a = b;
  call p16;
}

proc p14 {
  a = b;
  call p17;
}

proc p15 {
  b = a;
  call p17;
}

proc p16 {
  call p19;
  a = b;
  call p18;
}

proc p17 {
  b = a;
  call p18;
  call p20;
}

proc p18 {
  b = a;
}

proc p19 {
  a = b;
  call p21;
  call p23;
}

proc p20 {
  call p23;
  call p21;
  a = b;
}

proc p21 {
  call p25;
  b = a;
  call p26;
}

proc p22 {
  call p24;
  call p25;
  a = b;
}

proc p23 {
  a = b;
  call p24;
}

proc p24 {
  a = b;
  call p30;
  call p29;
}

proc p25 {
  b = a;
  call p29;
  call p30;
}

proc p26 {
  a = b;
  call p29;
}

proc p27 {
  a = b;
  call p28;
}

proc p28 {
  call p31;
  b = a;
}

proc p29 {
  b = a;
  call p31;
}

proc p30 {
  a = b;
  call p31;
}

proc p31 {
  b = a;
}